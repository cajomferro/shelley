single:
  | call
  | choice
  | loop

expr:
  | single
  | expr single

block: "{" expr "}" -> expr

call: ident "." ident ";"

choice: block "+" choice | block

loop: "loop" block

initial : "initial"
final : "final"
modifiers:
  | initial
  | final
  | initial final
  | final initial

next: ("->"| "~>") [ident ("," ident)* [","]] -> next_evts

sig:  [modifiers] ident next

sigs: (sig ";")+ 

user_claim_base :
| "enforce" "usage" formula ";" -> enforce
| "system" "check" formula ";" -> system_check

user_claim_base_list : (user_claim_base)*

user_claim :
| "enforce" "usage" formula ";" -> enforce
| "integration" "check" formula ";" -> integration_check
| "system" "check" formula ";" -> system_check
| "subsystem" ident "check" formula ";" -> subsystem_check

user_claim_list : (user_claim) *

op : sig block

ops : op+

name_type: ident ":" ident
uses: [name_type ("," name_type)* [","]]

sys:
| ident "(" uses ")" "{" ops user_claim_list "}" -> new_sys
| "base"  ident "{" sigs user_claim_base_list "}" -> base_sys

COMMENT: /#[^\n]*/

%import .ltlf_grammar.formula
%import .ltlf_grammar.ident
%import .ltlf_grammar.atom
%import .ltlf_grammar.end
%import .ltlf_grammar.act
%import .ltlf_grammar.true
%import .ltlf_grammar.false
%import .ltlf_grammar.bool
%import .ltlf_grammar.paren
%import .ltlf_grammar.land
%import .ltlf_grammar.lor
%import .ltlf_grammar.lnot
%import .ltlf_grammar.lnext
%import .ltlf_grammar.until
%import .ltlf_grammar.releases
%import .ltlf_grammar.wuntil
%import .ltlf_grammar.implies
%import .ltlf_grammar.equiv
%import .ltlf_grammar.globally
%import .ltlf_grammar.eventually
%import .ltlf_grammar.last
%import .ltlf_grammar.eq

%import common.CNAME
%import common.WS
%ignore WS
%ignore COMMENT