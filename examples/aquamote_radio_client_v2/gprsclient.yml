# https://www.arduino.cc/en/Reference/WiFiClientConnect
# disconnected event might be external (device error) or internal (user called disconnect() function)

# @carlos: note about operations: I could have omitted operations such as "connect", "write", or "network_join" because they
# are more like actions. Since I present them here their meaning is that of someone invoking action "connect"
#  and observing the immediate reply "connect" (the same name).

name: GPRSClient
start_with: [network_join, network_error]
end_with: [network_error, network_leave]
operations:
    network_join:
        next: [connect, connect_timeout, network_leave]
    network_error:
        next: [network_error, network_join]
    network_leave:
        next: [network_join, network_error]
    write_timeout:
        next: [write, disconnect]
    write_data_ready:
        next: [write, disconnect]
    connect:
        next: [disconnect, write]
    write:
      next: [disconnect, write_timeout, write_data_ready]
    disconnect:
        next: [connect, connect_timeout, network_leave]
    connect_timeout:
        next: [connect, connect_timeout, network_leave]

test_system:
  ok:
    receive_ok: [network_join, connect, write, write_data_ready, disconnect, network_leave]
  fail:
    invalid1: [network_join, connect, write, write_data_ready, disconnect, network_error]

# before "print_timeout" or "print_data_ready" or "print_disconnected":
# client.print(String("GET ") + url + " HTTP/1.1\r\n" +
#                 "Host: " + host + "\r\n" +
#                 "Connection: close\r\n\r\n");
#    while (client.available() == 0) {
#        if (millis() - timeout > 5000) {
#            Serial.println(">>> Client Timeout !");
#            client.stop();
#            return;
#        }
#    // Read all the lines of the reply from server and print them to Serial
#    while(client.available()) {
#        String line = client.readStringUntil('\r');
#        Serial.print(line);
#    }

## before "print":
## client.print(String("GET ") + url + " HTTP/1.1\r\n" +
##                 "Host: " + host + "\r\n" +
##                 "Connection: close\r\n\r\n");
#    - [connect, print] # data has been written
#    - [connect_timeout, connect]
## before "print_timeout" or "print_data_ready":
##    while (client.available() == 0) {
##        if (millis() - timeout > 5000) {
##            Serial.println(">>> Client Timeout !");
##            client.stop();
##            return;
##        }
##    // Read all the lines of the reply from server and print them to Serial
##    while(client.available()) {
##        String line = client.readStringUntil('\r');
##        Serial.print(line);
##    }
#    - [print, print_timeout]
#    - [print, print_data_ready]
#    - [print_data_ready, print]
#    - [print_timeout, print]
#    - [print, disconnect]
#    - [print_data_ready, disconnect]
#    - [print_timeout, disconnect]
