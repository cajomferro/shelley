name: Controller
start_with: [wakeup]
end_with: [sleep]
components:
    v: ValveHandlerTimer
    m: Magnetic
    r: RadioClientV2
    lp: LowPowerStrict
operations:
    wakeup:
        next: [sync, sync_err]
        micro: [m.locked, m.unlocked, lp.cancel] # cancels low power timer (even if it's not activated), this avoids having an extra operation for only the first time
    sleepTimeout:
        next: [sync, sync_err]
        micro: [lp.wakeup]
    sync: # exchange data with server
        next: [runValves, sync, sync_err]
        micro: [r.begin, r.send, r.send_ok, r.disconnected, r.stopped]
    sync_err:
        next: [sync, sync_err, sleep]
        micro:
          seq:
            - xor:
              - seq: [r.begin, r.send, r.send_err_401, r.disconnected, r.stopped]
              - seq: [r.begin, r.send, r.send_err_404, r.disconnected, r.stopped]
              - seq: [r.begin, r.send, r.send_err_500, r.disconnected, r.stopped]
              - seq: [r.begin, r.send, r.send_err_timeout, r.disconnected, r.stopped]
              - r.begin_err
    runValves:
        next: [sleep]
        micro: [v.v1, v.v2, v.v3, v.v4]
    sleep:
        next: [wakeup, sleepTimeout]
        micro: [lp.setup, lp.sleep]

test_system:
  ok:
    valid1: [wakeup, sync, runValves, sleep]
    valid2: [wakeup, sync, runValves, sleep, sleepTimeout, sync, runValves, sleep]
    sync2x: [wakeup, sync, sync, runValves, sleep]
    sync3x: [wakeup, sync, sync_err, sync, runValves, sleep]
    4evererror: [wakeup, sync_err, sync_err, sync_err, sync_err, sync_err, sleep]
  fail:
    invalid_start: [sleepTimeout, sync, runValves, sleep] # sleepTimeout is not a start operation


test_integration:
  ok:
    valid1: [m.locked, m.unlocked, lp.cancel, r.begin, r.send, r.send_ok, r.disconnected, r.stopped, v.v1, v.v2, v.v3, v.v4, lp.setup, lp.sleep]
    valid2: [m.locked, m.unlocked, lp.cancel, r.begin, r.send, r.send_ok, r.disconnected, r.stopped, v.v1, v.v2, v.v3, v.v4, lp.setup, lp.sleep, m.locked, m.unlocked, lp.cancel, r.begin, r.send, r.send_ok, r.disconnected, r.stopped, v.v1, v.v2, v.v3, v.v4, lp.setup, lp.sleep]
  fail:
    invalid1a: [m.locked, m.unlocked, lp.cancel, r.begin, r.send, r.disconnected, r.stopped, v.v1, v.v2, v.v3, v.v4, lp.setup, lp.sleep, lp.wakeup] # missing r.send_ok on macro behavior sync
    invalid1b: [m.locked, m.unlocked, r.begin, r.send, r.send_ok, r.disconnected, r.stopped, v.v1, v.v2, v.v3, v.v4, lp.setup, lp.sleep, lp.wakeup] # missing 'lp.cancel' on macro behavior 'wakeup'
    invalid1c: [m.locked, lp.cancel, r.begin, r.send, r.send_ok, r.disconnected, r.stopped, v.v1, v.v2, v.v3, v.v4, lp.setup, lp.sleep, lp.wakeup] # missing 'm.unlocked' on macro behavior 'wakeup'
    invalid1d: [m.locked, m.unlocked, lp.cancel, r.begin, r.send, r.send_ok, r.disconnected, r.stopped, v.v1, v.v2, v.v3, v.v4, lp.setup, lp.sleep, lp.wakeup] # wakeup is not final
    invalid2a: [m.locked, m.unlocked, lp.cancel, r.begin, r.send, r.disconnected, r.stopped, v.v1, v.v2, v.v3, v.v4, lp.sleep, m.locked, m.unlocked, lp.cancel] # missing r.send_ok on macro behavior sync
    invalid2b: [m.locked, m.unlocked, r.begin, r.send, r.send_ok, r.disconnected, r.stopped, v.v1, v.v2, v.v3, v.v4, lp.sleep, m.locked, m.unlocked, lp.cancel] # missing 'lp.cancel' on macro behavior 'wakeup'
    invalid3: [m.locked, m.unlocked]
    invalid4: [m.locked, m.unlocked, lp.cancel, r.begin, r.send, r.send_ok, r.disconnected, r.stopped, v.v1, v.v2, v.v3, v.v4]
    invalid5: [m.locked, m.unlocked, lp.cancel]
    invalid7: false
    empty: []