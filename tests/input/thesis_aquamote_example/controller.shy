Controller (s: Sectors, pw: Power, w: Wireless, pl: Plan) {

 initial boot -> try_update, sleep {
    pw.wake_up;
 }

  try_update  ~> update_ok, update_error {
    #loop {w.start; w.start_failed; w.stop;} # replaced by update_error -> try_update
    w.start;
 }

 update_ok -> follow_new_plan {
    w.start_ok;
    loop {w.request;}
    w.request; # at least one
    w.stop;
 }

  follow_new_plan -> sleep {
    pl.update;
    loop{{s.sector1;} + {s.sector2;} + {s.sector3;} + {s.sector4;}}
  }

  update_error -> try_update, follow_default_plan {
    w.start_failed;
	w.stop;
 }

 follow_default_plan -> sleep {
    pl.reset;
    s.sector1; s.sector2; s.sector3; s.sector4;
 }

# try_update -> update_ok, update_error {
#    loop {w.start; w.start_failed; w.stop;}
#    w.start;
# }
#
# update_ok -> sleep {
#    w.start_ok;
#    loop {w.request;}
#    w.request; # at least one
#    w.stop;
#    loop{{s.sector1;} + {s.sector2;} + {s.sector3;} + {s.sector4;}}
# }
#
#  update_error -> sleep {
#    w.start_failed;
#	w.stop;
#	s.sector1; s.sector2; s.sector3; s.sector4;
# }

 final sleep -> {
	pw.sleep;
 }

 # thesis-explained claims

 #system check boot;
 #system check F (sleep & END);
 system check (boot & F (sleep & END));

 # RULE 1 - at least one request is required if wifi is connected, checked by integration before
 integration check G ((w.start_ok & F w.stop) -> X w.request);

 # RULE 2 - it is not possible to run any sector without a wifi tentative first
 integration check G ((pw.wake_up & (X (!w.start))) -> (!(F (s.sector1)) & !(F (s.sector2)) & !(F (s.sector3)) & !(F (s.sector4))));
 #integration check G ((pw.wake_up & (X (!w.start))) -> X pw.sleep); # redundant, similar in effect to the previous one
 #integration check G (pw.wake_up -> X (!s.sector1 &  !s.sector2 & !s.sector3 & !s.sector4)); redundant

 # RULE 2.1 - it is not possible to sleep without a wifi tentative first (even more restrictive than R2.1)
 # integration check G ((pw.wake_up & (X (!w.start))) -> X !pw.sleep);

 # Rule 2.2 - it is not possible to sleep without a wifi tentative first and at least one sector run (even more restrictive than R2.2)
 #integration check G ((!(w.stop | s.sector1 | s.sector2 | s.sector3 | s.sector4 )) -> ((X !pw.sleep) | END));

 # Rule 3 - If all requests fail, I stick to the default plan which is to run all sectors from 1 to 4
 #integration check G ((w.start & !(F w.request)) -> ((! F(s.sector3)) & (! F(s.sector4))));
 integration check G ((w.start & !(F w.request)) -> ((F (s.sector1 & X(s.sector2 & X (s.sector3 & X (s.sector4))))) & F(pl.reset)  ));

 # Rule 4 - If requests don't fail, I follow the new plan
 integration check G ((w.start & (F w.request)) -> ((F (s.sector1 | s.sector2 | s.sector3 | s.sector4 | END)) & F(pl.update) ));
}